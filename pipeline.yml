groups:
- name: all
  jobs:
  - unit
  - build-rc
  - build-arm
  - integration
  - single-integration
  - promote
  - bump-patch
  - bump-minor
  - bump-major
  - deploy
  - deploy-rpi
  - arduino-docker-build
  - arduino-docker-promotion
  - arduino-esp32-docker-build
  - arduino-esp32-docker-promotion
  - arduinojson-test
  - libyuarel-test
  - hard-status-esp32
  - cube
  - diffusor
- name: backend
  jobs:
  - unit
  - build-rc
  - build-arm
  - integration
  - single-integration
  - promote
  - bump-patch
  - bump-minor
  - bump-major
  - deploy
  - deploy-rpi
- name: esp32-firmware
  jobs:
  - arduino-docker-build
  - arduino-docker-promotion
  - arduino-esp32-docker-build
  - arduino-esp32-docker-promotion
  - arduinojson-test
  - libyuarel-test
  - hard-status-esp32
- name: physibles
  jobs:
  - cube
  - diffusor

jobs:
- name: unit
  plan:
  - aggregate:
    - get: source-code
      trigger: true
    - get: base-image
      trigger: true
  - task: test
    image: base-image
    file: source-code/src/main/ci/unit.yml

- name: build-rc
  serial_groups: [version]
  plan:
  - aggregate:
    - get: source-code
      trigger: true
      passed: [unit]
    - get: version
      params:
        pre: rc
    - get: base-image
      trigger: true
      passed: [unit]
      params:
        skip_download: true
  - aggregate:
    - put: release
      params:
        build: source-code
        tag: version/number
        tag_prefix: v
        tag_as_latest: false
  - put: version
    params:
      file: version/number

- name: build-arm
  serial_groups: [version]
  plan:
  - aggregate:
    - get: source-code
      trigger: true
      passed: [integration,single-integration]
    - get: version
      passed: [integration,single-integration]
    - get: release
      trigger: true
      params:
        skip_download: true
      passed: [integration,single-integration]
  - aggregate:
    - put: release-arm
      params:
        build: source-code
        tag: version/number
        tag_prefix: v
        tag_as_latest: false

- name: integration
  serial_groups: [cloud-it]
  plan:
  - aggregate:
    - get: source-code
      passed: [build-rc]
    - get: release
      passed: [build-rc]
      trigger: true
      params:
        skip_download: true
    - get: version
      passed: [build-rc]
    - get: redis-runtime
      trigger: true
      params:
        skip_download: true
  - task: create-chart
    file: source-code/src/main/ci/create-chart.yml
    params:
      version: ((chartVersion))
  - do:
    - put: helm-cloud-it
      params:
        chart: chart/hard-status-((chartVersion)).tgz
        wait_until_ready: 180
        replace: true
        override_values:
        - key: imageSecret
          value: ((cluster1it.secret_name))
        - key: ingressHostname
          value: ((ingressITHostname))
        - key: serviceType
          value: ClusterIP
    - task: test
      attempts: 5
      params:
        protocol: https
        port: 443
        hostname: ((ingressITHostname))
        concourse: ((concourse-url))
      file: source-code/src/main/ci/integration-test.yml
    ensure:
      put: helm-cloud-it
      params:
        chart: chart/hard-status-((chartVersion)).tgz
        wait_until_ready: 180
        delete: true
        override_values:
        - key: imageSecret
          value: ((cluster1it.secret_name))
        - key: ingressITHostname
          value: ((ingressHostname))
        - key: serviceType
          value: ClusterIP

- name: single-integration
  plan:
  - aggregate:
    - get: source-code
      passed: [build-rc]
    - get: release
      passed: [build-rc]
      trigger: true
    - get: version
      passed: [build-rc]
  - task: test
    image: release
    file: source-code/src/main/ci/single-integration.yml
    params:
      concourse: ((concourse-url))

- name: promote
  serial_groups: [version]
  plan:
  - aggregate:
    - get: source-code
      passed: [build-arm]
    - get: release-rc
      resource: release
      trigger: true
      passed: [build-arm]
      params:
        save: true
    - get: release-arm-rc
      resource: release-arm
      trigger: true
      passed: [build-arm]
      params:
        save: true
    - get: version
      passed: [build-arm]
      params:
        bump: final
  - aggregate:
    - put: release
      params:
        load: release-rc
        tag: version/number
        tag_prefix: v
        tag_as_latest: true
    - put: release-arm-plain
      params:
        load: release-arm-rc
        tag: version/number
        tag_prefix: v
        tag_as_latest: true
  - put: version
    params:
      file: version/number

- name: bump-patch
  serial_groups: [version]
  plan:
  - get: release
    trigger: true
    passed: [promote]
    params: {skip_download: true}
  - get: release-arm-plain
    trigger: true
    passed: [promote]
    params: {skip_download: true}
  - get: version
    passed: [promote]
    trigger: true
  - put: version
    params:
      bump: patch

- name: bump-minor
  serial_groups: [version]
  plan:
  - put: version
    params:
      bump: minor

- name: bump-major
  serial_groups: [version]
  plan:
  - put: version
    params:
      bump: major

- name: deploy
  serial_groups: [helm-cloud]
  plan:
  - aggregate:
    - get: source-code
      passed: [promote]
    - get: release
      passed: [promote]
      trigger: true
      params:
        skip_download: true
    - get: version
      trigger: true
      passed: [promote]
  - task: create-chart
    file: source-code/src/main/ci/create-chart.yml
    params:
      version: ((chartVersion))
  - put: helm-cloud
    params:
      chart: chart/hard-status-((chartVersion)).tgz
      wait_until_ready: 60
      replace: true
      override_values:
      - key: imageSecret
        value: ((cluster1.secret_name))
      - key: ingressHostname
        value: ((ingressHostname))
      - key: serviceType
        value: ClusterIP
      - key: documentBaseUrl
        value: ((documentBaseUrl))

- name: deploy-rpi
  serial_groups: [helm-rpi]
  plan:
  - aggregate:
    - get: source-code
      passed: [promote]
    - get: release-arm-plain
      passed: [promote]
      trigger: true
      params:
        skip_download: true
    - get: version
      trigger: true
      passed: [promote]
  - task: create-chart
    file: source-code/src/main/ci/create-chart.yml
    params:
      version: ((chartVersion))
  - put: helm-rpi
    params:
      chart: chart/hard-status-((chartVersion)).tgz
      wait_until_ready: 120
      replace: true
      override_values:
      - key: imageSecret
        value: ((cluster2.secret_name))
      - key: ingressHostname
        value: ((ingressRpiHostname))
      - key: serviceType
        value: NodePort
      - key: imageName
        value: ((arm-backend-image-name))
      - key: redisDockerImage
        value: knjcode/rpi-redis
      - key: documentBaseUrl
        value: ((documentBaseUrlRpi))


- name: arduino-docker-build
  plan:
  - aggregate:
    - get: arduino-ci
    - get: base-docker-image
      trigger: true
      params:
        skip_download: true
    - get: arduino-release
      trigger: true
    - get: arduino-docker-source
      trigger: true
  - task: prepare-docker-build
    file: arduino-ci/src/arduino/ci/prepare-arduino-docker.yml
  - put: arduino-docker-image
    params:
      build: arduino-release-docker-source
      tag: arduino-release/version
      build_args_file: build-args/arduino-build-args.json
  - task: unit
    image: arduino-docker-image
    file: arduino-ci/src/arduino/ci/test-arduino-docker.yml

- name: arduino-docker-promotion
  plan:
  - get: arduino-docker-image
    passed: [arduino-docker-build]
    trigger: true
    params:
      save: true
  - put: arduino-docker-image
    params:
      load: arduino-docker-image
      tag_as_latest: true

- name: arduino-esp32-docker-build
  plan:
  - aggregate:
    - get: arduino-ci
    - get: arduino-docker-image
      trigger: true
      passed: [arduino-docker-promotion]
      params:
        skip_download: true
        tag: latest
    - get: arduino-esp32-source
      trigger: true
      params:
        submodules: all
    - get: arduino-esp32-docker-source
      trigger: true
  - task: prepare-docker-build
    file: arduino-ci/src/arduino/ci/prepare-arduino-esp32-docker.yml
    params:
      FROM: ((project-registry))/((arduino-image-name))
  - put: arduino-esp32-docker-image
    params:
      build: build
      save: true
  - task: test
    image: arduino-esp32-docker-image
    file: arduino-ci/src/arduino/ci/test-arduino-esp32-docker.yml

- name: arduino-esp32-docker-promotion
  plan:
  - get: arduino-esp32-docker-image
    passed: [arduino-esp32-docker-build]
    trigger: true
    params:
      save: true
  - put: arduino-esp32-docker-image
    params:
      load: arduino-esp32-docker-image
      tag_as_latest: true

- name: arduinojson-test
  plan:
  - get: arduinojson-library-source
    trigger: true
  - get: arduino-ci
  - task: test
    file: arduino-ci/src/arduino/ci/test-arduinojson.yml

- name: libyuarel-test
  plan:
  - get: libyuarel-library-source
    trigger: true
  - get: arduino-ci
  - task: test
    file: arduino-ci/src/arduino/ci/test-libyuarel.yml

- name: hard-status-esp32
  plan:
  - aggregate:
    - get: arduino-ci
    - get: arduino-esp32-docker-image
      trigger: true
      passed: [arduino-esp32-docker-promotion]
    - get: hard-status-esp32-source
      trigger: true
    - get: neopixelbus-library-source
      trigger: true
    - get: webserver-library-source
      trigger: true
    - get: arduinojson-library-source
      trigger: true
      passed: [arduinojson-test]
    - get: libyuarel-library-source
      trigger: true
      passed: [libyuarel-test]
  - task: html
    file: arduino-ci/src/arduino/ci/build-html.yml
  - aggregate:
    - do:
      - aggregate:
        - task: defaults
          file: arduino-ci/src/arduino/ci/build-defaults.yml
          params:
            DEFAULT_NAME: ((firmware.default.name))
            DEFAULT_PASSWORD: ((firmware.default.password))
            DEFAULT_API_URL: https://((ingressHostname))/concourse?url=((concourse-url))
            DEFAULT_OTA_URL: ((firmware.url.leds64))
            DEFAULT_OTA_AUTH: ((firmware.default.ota_auth))
            DEFAULT_WIFI0_SSID: ((firmware.default.wifi0_ssid))
            DEFAULT_WIFI0_PSK: ((firmware.default.wifi0_psk))
          output_mapping:
            defaults: defaults-64
        - task: hardware
          file: arduino-ci/src/arduino/ci/build-hardware.yml
          params:
            LED_COUNT: 64
            LED_PIN: 5
          output_mapping:
            hardware: hardware-64
      - task: build-64
        image: arduino-esp32-docker-image
        file: arduino-ci/src/arduino/ci/build-hard-status-esp32.yml
        output_mapping:
          lolin32-firmware-build: lolin32-firmware-build-64
        input_mapping:
          defaults: defaults-64
          hardware: hardware-64
      - put: lolin32-firmware-64
        params:
          path: lolin32-firmware-build-64/hard-status-esp32-lolin32.bin
    - do:
      - aggregate:
        - task: defaults
          file: arduino-ci/src/arduino/ci/build-defaults.yml
          params:
            DEFAULT_NAME: ((firmware.default.name))
            DEFAULT_PASSWORD: ((firmware.default.password))
            DEFAULT_API_URL: https://((ingressHostname))/concourse?url=((concourse-url))
            DEFAULT_OTA_URL: ((firmware.url.leds256))
            DEFAULT_OTA_AUTH: ((firmware.default.ota_auth))
            DEFAULT_WIFI0_SSID: ((firmware.default.wifi0_ssid))
            DEFAULT_WIFI0_PSK: ((firmware.default.wifi0_psk))
          output_mapping:
            defaults: defaults-256
        - task: hardware
          file: arduino-ci/src/arduino/ci/build-hardware.yml
          params:
            LED_COUNT: 256
            LED_PIN: 5
          output_mapping:
            hardware: hardware-256
      - task: build-256
        image: arduino-esp32-docker-image
        file: arduino-ci/src/arduino/ci/build-hard-status-esp32.yml
        output_mapping:
          lolin32-firmware-build: lolin32-firmware-build-256
        input_mapping:
          defaults: defaults-256
          hardware: hardware-256
      - put: lolin32-firmware-256
        params:
          path: lolin32-firmware-build-256/hard-status-esp32-lolin32.bin
    - do:
      - aggregate:
        - task: defaults
          file: arduino-ci/src/arduino/ci/build-defaults.yml
          params:
            DEFAULT_NAME: ((firmware.default.name))
            DEFAULT_PASSWORD: ((firmware.default.password))
            DEFAULT_API_URL: https://((ingressHostname))/concourse?url=((concourse-url))
            DEFAULT_OTA_URL: ((firmware.url.leds384))
            DEFAULT_OTA_AUTH: ((firmware.default.ota_auth))
            DEFAULT_WIFI0_SSID: ((firmware.default.wifi0_ssid))
            DEFAULT_WIFI0_PSK: ((firmware.default.wifi0_psk))
          output_mapping:
            defaults: defaults-384
        - task: hardware
          file: arduino-ci/src/arduino/ci/build-hardware.yml
          params:
            LED_COUNT: 384
            LED_PIN: 5
          output_mapping:
            hardware: hardware-384
      - task: build-384
        image: arduino-esp32-docker-image
        file: arduino-ci/src/arduino/ci/build-hard-status-esp32.yml
        output_mapping:
          lolin32-firmware-build: lolin32-firmware-build-384
        input_mapping:
          defaults: defaults-384
          hardware: hardware-384
      - put: lolin32-firmware-384
        params:
          path: lolin32-firmware-build-384/hard-status-esp32-lolin32.bin

- name: diffusor
  plan:
  - get: 3d-source
    trigger: true
  - task: build-stl
    file: 3d-source/src/3d/ci/build-stl.yml
    params:
      NAME: diffusor
  - task: build-gcode
    file: 3d-source/src/3d/ci/build-gcode.yml
    params:
      NAME: diffusor
      LAYER_HEIGHT: 0.35

- name: cube
  plan:
  - get: 3d-source
    trigger: true
  - task: build-stl
    file: 3d-source/src/3d/ci/build-stl.yml
    params:
      NAME: cube
  - task: build-gcode
    file: 3d-source/src/3d/ci/build-gcode.yml
    params:
      NAME: cube
      LAYER_HEIGHT: 0.35

resources:
- name: source-code
  type: git
  source:
    <<: *project-source
    paths:
    - src/main/ci
    - src/main/ts
    - src/main/helm
    - Dockerfile
    - jasmine.json
    - package.json
    - tsconfig.json
    - .eslintrc.yaml

- name: base-image
  type: docker-image
  source:
    repository: node
    tag: 8-alpine

- name: release
  type: docker-image
  source:
    repository: ((project-registry))/((backend-image-name))
    username: ((docker.username))
    password: ((docker.password))

- name: release-arm
  type: remote-docker-image
  source:
    repository: ((project-registry))/((arm-backend-image-name))
    username: ((docker.username))
    password: ((docker.password))
    dockerd: ((dockerd))

- name: release-arm-plain
  type: docker-image
  source:
    repository: ((project-registry))/((arm-backend-image-name))
    username: ((docker.username))
    password: ((docker.password))

- name: redis-runtime
  type: docker-image
  source:
    repository: redis

- name: version
  type: semver
  source:
    driver: git
    uri: ((git.uri))
    branch: version
    file: version
    private_key: ((git.private_key))

- name: helm-cloud
  type: helm
  source: ((cluster1))

- name: helm-cloud-it
  type: helm
  source: ((cluster1it))

- name: helm-rpi
  type: helm
  source: ((cluster2))

- name: hard-status-esp32-source
  type: git
  source:
    <<: *project-source
    paths:
    - src/arduino/hard-status-esp32
    - src/arduino/ci

- name: arduino-ci
  type: git
  source:
    <<: *project-source
    paths:
    - src/arduino/ci
    - pipeline.yml

- name: arduino-docker-source
  type: git
  source:
    <<: *project-source
    paths:
    - src/arduino/ci/arduino-docker
    - src/arduino/ci/prepare-arduino-docker.sh
    - src/arduino/ci/prepare-arduino-docker.yml

- name: arduino-esp32-docker-source
  type: git
  source:
    <<: *project-source
    paths:
    - src/arduino/ci/arduino-esp32-docker
    - src/arduino/ci/prepare-arduino-esp32-docker.sh
    - src/arduino/ci/prepare-arduino-esp32-docker.yml

- name: lolin32-firmware-64
  type: curl
  source:
    method: PUT
    url: ((firmware.url.leds64))
    username: ((firmware.username))
    password: ((firmware.password))

- name: lolin32-firmware-256
  type: curl
  source:
    method: PUT
    url: ((firmware.url.leds256))
    username: ((firmware.username))
    password: ((firmware.password))

- name: lolin32-firmware-384
  type: curl
  source:
    method: PUT
    url: ((firmware.url.leds384))
    username: ((firmware.username))
    password: ((firmware.password))

- name: arduino-docker-image
  type: docker-image
  source:
    username: ((docker.username))
    password: ((docker.password))
    repository: ((project-registry))/((arduino-image-name))

- name: arduino-esp32-docker-image
  type: docker-image
  source:
    username: ((docker.username))
    password: ((docker.password))
    repository: ((project-registry))/((arduino-esp32-image-name))

- name: base-docker-image
  type: docker-image
  check_every: 1h
  source:
    repository: debian
    tag: latest

- name: arduino-release
  type: github-release
  check_every: 1h
  source:
    owner: arduino
    repository: arduino

- name: arduino-esp32-source
  type: git
  check_every: 1h
  source:
    uri: https://github.com/espressif/arduino-esp32.git

- name: arduinojson-library-source
  type: git
  source:
    uri: https://github.com/bblanchon/ArduinoJson.git

- name: neopixelbus-library-source
  type: git
  source:
    uri: https://github.com/timotto/NeoPixelBus.git

- name: webserver-library-source
  type: git
  source:
    uri: https://github.com/bbx10/WebServer_tng.git

- name: libyuarel-library-source
  type: git
  source:
    uri: https://github.com/jacketizer/libyuarel.git

- name: 3d-source
  type: git
  source:
    <<: *project-source
    paths:
    - src/3d/openscad
    - src/3d/ci

resource_types:
- name: helm
  type: docker-image
  source:
    repository: linkyard/concourse-helm-resource

- name: curl
  type: docker-image
  source:
    repository: timotto/concourse-curl-resource
    tag: latest

- name: remote-docker-image
  type: docker-image
  source:
    repository: timotto/docker-image-resource
  privileged: true

project-source: &project-source
  uri: ((git.uri))
  branch: ((git.branch))
  private_key: ((git.private_key))

